{"version":3,"file":"bundle.js","sources":["webpack:///bundle.js"],"sourcesContent":["!function(e){function t(t){for(var i,s,a=t[0],l=t[1],c=t[2],u=0,h=[];u<a.length;u++)s=a[u],Object.prototype.hasOwnProperty.call(o,s)&&o[s]&&h.push(o[s][0]),o[s]=0;for(i in l)Object.prototype.hasOwnProperty.call(l,i)&&(e[i]=l[i]);for(d&&d(t);h.length;)h.shift()();return r.push.apply(r,c||[]),n()}function n(){for(var e,t=0;t<r.length;t++){for(var n=r[t],i=!0,a=1;a<n.length;a++){var l=n[a];0!==o[l]&&(i=!1)}i&&(r.splice(t--,1),e=s(s.s=n[0]))}return e}var i={},o={0:0},r=[];function s(t){if(i[t])return i[t].exports;var n=i[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=i,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)s.d(n,i,function(t){return e[t]}.bind(null,i));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,\"a\",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p=\"\";var a=window.webpackJsonp=window.webpackJsonp||[],l=a.push.bind(a);a.push=t,a=a.slice();for(var c=0;c<a.length;c++)t(a[c]);var d=l;r.push([0,1]),n()}({\"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./src/main.css\":function(e,t,n){},\"./src/index.ts\":function(e,t,n){\"use strict\";n.r(t);var i=n(\"./node_modules/three/src/math/Color.js\"),o=n(\"./node_modules/three/src/cameras/PerspectiveCamera.js\"),r=n(\"./node_modules/three/src/scenes/Scene.js\"),s=n(\"./node_modules/three/src/renderers/WebGLRenderer.js\"),a=n(\"./node_modules/three/examples/jsm/controls/OrbitControls.js\"),l=n(\"./node_modules/three/src/math/Vector3.js\"),c=n(\"./node_modules/stats.js/build/stats.min.js\");const d=!1;const u=function(e){e.width=e.clientWidth,e.height=e.clientHeight;const t=function(e){return d?new Proxy(e,{get:function(e,t){if(!(t in e))throw TypeError(`${String(t)} does not exist on ${typeof e}`);return\"function\"==typeof e[t]?(...n)=>{console.debug(`GLCall: ${t} (${n.map(e=>e?e.toString():\"null\").join(\", \")})`);const i=e[t](...n),o=e.getError();if(o!==WebGL2RenderingContext.NO_ERROR){const e=`GLError 0x${o.toString(16)}`;throw console.error(e),new Error(e)}return i}:e[t]}}):e}(e.getContext(\"webgl2\",{antialias:!0,alpha:!0,powerPreference:\"high-performance\"}));return t||function(e){const t=document.createElement(\"h3\");throw t.classList.add(\"error\"),t.innerHTML=e||\"Unknown error\",document.body.prepend(t),new Error(e||\"Unknown error\")}(\"Failed to get WebGL2 context. Your browser or device may not support WebGL2.\"),t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),t.clearColor(0,0,0,1),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),t}(document.getElementById(\"display0\"));var h=n(\"./node_modules/three/src/objects/Group.js\"),m=n(\"./node_modules/three/src/objects/Mesh.js\"),f=n(\"./node_modules/three/src/materials/LineBasicMaterial.js\"),v=n(\"./node_modules/three/src/objects/Line.js\"),g=n(\"./node_modules/three/src/textures/CanvasTexture.js\"),p=n(\"./node_modules/three/src/textures/DataTexture.js\"),b=n(\"./node_modules/three/src/constants.js\"),y=n(\"./node_modules/three/src/materials/ShaderMaterial.js\"),w=n(\"./node_modules/dat.gui/build/dat.gui.module.js\"),x=n(\"./node_modules/three/src/geometries/TorusGeometry.js\"),C=n(\"./node_modules/three/src/geometries/TorusKnotGeometry.js\");const P=[\"donut\",\"torus\"],L=new x.a(900,300,160,100),_=new C.a(900,300,150,18);class S{static get geometry(){return{donut:L,torus:_}[j.geometry]}}const j=new class{constructor(e=9e3,t=100,n=8e3,i=\"toon\",o=\"peridot\",r=!1,s=\"#FFFFFF\",a=\"#E0E0E0\",l=\"torus\",c=3,d=.01,u=\"#000000\",h=\"#517777\",m=\"#666666\",f=\"#808080\",v=\"#CCCCCC\",g=\"No lines w/ objs > 1, perf is bad\",p=1e3,b=1e3,y=!0,x=0,C=!1,L=0,_=!1,S=20,j=(()=>this._hasChanged=!0),M=!1){this.lightPositionX=e,this.lightPositionY=t,this.lightPositionZ=n,this.material=i,this.substance=o,this.useColor=r,this.ambientMaterial=s,this.diffuseMaterial=a,this.geometry=l,this.levels=c,this.silhouetteWidth=d,this.silhouetteColor=u,this.clearColor=h,this.ambientGlobal=m,this.ambientLight=f,this.diffuseLight=v,this.animatorsNote=g,this.velocityX=p,this.velocityY=b,this.flipDirection=y,this.lineCount=x,this.showLines=C,this.objectCount=L,this.gather=_,this.gatherSpeed=S,this.forceUpdate=j,this.showCanvases=M,this._hasChanged=!0,this.gui=new w.a,document.body.style.background=this.clearColor;const O=new Proxy(this,{set(e,t,n){var i;return e._hasChanged=!0,\"clearColor\"===t&&(document.body.style.background=e.clearColor),(null===(i=Object.getOwnPropertyDescriptor(e,t))||void 0===i?void 0:i.configurable)&&(e[t]=n),!0}});this.gui.addColor(O,\"clearColor\").listen(),this.gui.add(O,\"material\",[\"toon\",\"scribble\"]).listen(),this.gui.add(O,\"geometry\",P).listen(),this.gui.add(O,\"objectCount\",0,1331,1).listen(),this.gui.add(O,\"gather\").listen(),this.gui.add(O,\"gatherSpeed\",1,100,1).listen();const T=this.gui.addFolder(\"light position\");T.add(O,\"lightPositionX\",-1e4,1e4,10).listen(),T.add(O,\"lightPositionY\",-1e4,1e4,10).listen(),T.add(O,\"lightPositionZ\",1,1e4,10).listen();const E=this.gui.addFolder(\"toon settings\");E.add(O,\"substance\",[\"ruby\",\"peridot\",\"sapphire\"]).listen(),E.add(O,\"useColor\").listen(),E.addColor(O,\"ambientMaterial\").listen(),E.addColor(O,\"diffuseMaterial\").listen();const D=this.gui.addFolder(\"scribble settings\");D.add(O,\"levels\",[2,3,4]).listen(),D.add(O,\"silhouetteWidth\",0,.2,.001).listen(),D.addColor(O,\"silhouetteColor\").listen();const k=this.gui.addFolder(\"environment settings\");k.addColor(O,\"ambientGlobal\").listen(),k.addColor(O,\"ambientLight\").listen(),k.addColor(O,\"diffuseLight\").listen();const R=this.gui.addFolder(\"animation\");return R.add(O,\"animatorsNote\"),R.add(O,\"velocityX\",-1e3,1e3,10).listen(),R.add(O,\"velocityY\",-1e3,1e3,10).listen(),R.add(O,\"lineCount\",0,20,1).listen(),R.add(O,\"showLines\").listen(),R.add(O,\"flipDirection\").listen(),this.gui.add(O,\"forceUpdate\"),this.gui.add(O,\"showCanvases\").listen(),O}get hasChanged(){return!!this._hasChanged&&(this._hasChanged=!1,!0)}get lightPosition(){return[this.lightPositionX,this.lightPositionY,this.lightPositionZ]}get velocity(){return[this.velocityX,this.velocityY]}},M={ambientMaterial:new l.a(44,3,3),diffuseMaterial:new l.a(157,11,11)},O={ambientMaterial:new l.a(5,44,5),diffuseMaterial:new l.a(19,157,19)},T={ambientMaterial:new l.a(10,10,150),diffuseMaterial:new l.a(10,10,100)},E={ambientGlobal:new l.a(.4,.4,.4),ambientLight:new l.a(.5,.5,.5),diffuseLight:new l.a(.8,.8,.8)},D={ruby:M,peridot:O,sapphire:T};function k(e=M,t=E){const n={...t,...e};return{illuminated:function(e){let t=new l.a(0,0,0),n=new l.a(0,0,0);return t.multiplyVectors(e.ambientGlobal,e.ambientMaterial),n.multiplyVectors(e.ambientLight,e.ambientMaterial),t.addVectors(t,n),n.multiplyVectors(e.diffuseLight,e.diffuseMaterial),t.addVectors(t,n),t}(n).toArray(),shadowed:function(e){let t=new l.a(0),n=new l.a(0);return t.multiplyVectors(e.ambientGlobal,e.ambientMaterial),n.multiplyVectors(e.ambientLight,e.ambientMaterial),t.addVectors(t,n),t}(n).toArray()}}class R extends y.a{constructor(){super(...arguments),this.name=\"painter\",this.illuminationLayers=[],this.customColors=void 0,this.textures=[],this.beforeRender=({},{},{},{},e)=>{e instanceof R&&Object.assign(e.uniforms,this.updateUniforms())},this.vertexShader=\"\\n        out vec3 vertexNormal;\\n        out vec3 vertexPosition;\\n        out vec2 vertexUV;\\n\\n        void main() {\\n            vertexNormal = mat3(transpose(inverse(modelViewMatrix))) * normal;\\n            vertexPosition = vec3(modelMatrix * vec4(position, 1.0));\\n            vertexUV = uv;\\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n        }\\n    \",this.fragmentShader=\"\\n        // Defines\\n        #define MAX_SHADING_LEVELS 4\\n        #define ERROR_COLOR vec3(0.5, 0.4, 0.5)\\n\\n        // Uniforms\\n        uniform vec3 lightPosition;\\n        uniform sampler2D lakesTextures[4];\\n        uniform int textureCount;\\n\\n        // Inputs\\n        in vec3 vertexNormal;\\n        in vec3 vertexPosition;\\n        in vec2 vertexUV;\\n\\n        // Outputs\\n        // gl_FragColor\\n\\n        // Constants\\n        const vec2 ILLUM_COORD = vec2(0, 0);\\n        const vec2 SHADE_COORD = vec2(1, 0);\\n\\n        // Functions\\n\\n        vec3 lakesTonalShading(float cos) {\\n            if (cos > 0.5) {\\n                // illuminated\\n                return vec3(texture2D(lakesTextures[0], ILLUM_COORD));\\n            } else {\\n                // shaded\\n                return vec3(texture2D(lakesTextures[0], SHADE_COORD));\\n            }\\n        }\\n\\n        int getShadingLevel(float cos, float increment) {\\n            float range = 0.0;\\n            for (int i = 0; i < MAX_SHADING_LEVELS && range < 1.01; i++, range += increment) {\\n                if (cos >= range && cos < range + increment) {\\n                    return (textureCount - i) - 1;\\n                }\\n            }\\n            return -1;\\n        }\\n\\n        vec3 lakesScribbleShading(float cos) {\\n            float rangeIncrement = 1.0 / float(textureCount);\\n            int level = getShadingLevel(cos, rangeIncrement);\\n            switch (level) {\\n                case 0: return vec3(texture2D(lakesTextures[0], vertexUV));\\n                case 1: return vec3(texture2D(lakesTextures[1], vertexUV));\\n                case 2: return vec3(texture2D(lakesTextures[2], vertexUV));\\n                case 3: return vec3(texture2D(lakesTextures[3], vertexUV));\\n                case -1: return ERROR_COLOR;\\n            }\\n        }\\n\\n        // Entry\\n        void main() {\\n            vec3 colorToShadeIn;\\n\\n            vec3 normal = normalize(vertexNormal); // n_bar\\n            vec3 lightDirection = normalize(lightPosition - vertexPosition); // l_bar\\n\\n            float cos = clamp(dot(normal, lightDirection), 0.0, 1.0);\\n\\n            if(textureCount == 1) {\\n                // Basic 2 Tone Shading\\n                colorToShadeIn = lakesTonalShading(cos);\\n            } else {\\n                // Scribble texture pack\\n                colorToShadeIn = lakesScribbleShading(cos);\\n            }\\n            gl_FragColor = vec4(colorToShadeIn, 1.0);\\n        }\\n    \"}updateUniforms(){if(this.needsUpdate=!0,this.uniformsNeedUpdate=!0,j.hasChanged){this.textures=[];let e=D[j.substance],t={ambientGlobal:new l.a(...new i.a(j.ambientGlobal).toArray()),ambientLight:new l.a(...new i.a(j.ambientLight).toArray()),diffuseLight:new l.a(...new i.a(j.diffuseLight).toArray())};j.useColor&&(e={ambientMaterial:new l.a(...new i.a(j.ambientMaterial).toArray().map(e=>255*e)),diffuseMaterial:new l.a(...new i.a(j.diffuseMaterial).toArray().map(e=>255*e))}),this.customColors&&(e=this.customColors);const n=k(e,t);switch(j.material){case\"toon\":this.textures.push(this.toon(n));break;case\"scribble\":const e=new i.a(...function(e,t){const n=t||Math.max(...e);return e.map(e=>e/n)}(n.illuminated,255));this.textures.push(...this.scribble(+j.levels,e)),j.showCanvases?this.showCanvases():this.removeCanvases()}}return{lightPosition:{value:new l.a(...j.lightPosition)},lakesTextures:{value:this.textures},textureCount:{value:this.textures.length}}}toon(e){return new p.a(new Uint8Array([...e.illuminated,...e.shadowed]),2,1,b.Qb,b.qc)}scribble(e,t){this.illuminationLayers=new Array(e).fill(null).map((e,n)=>this.makeTexCanvas(n,t));for(let e=0;e<this.illuminationLayers.length;e++){const n=this.illuminationLayers[e].context,o=[.1,.1,.1].map(t=>t*(e+1)),r=t.sub(new i.a(...o)).getStyle();this.zigzag(e,n,r),this.pointillism(e,n,r)}return this.illuminationLayers.map(e=>e.texture)}removeCanvases(){for(let e=0;e<4;e++){const t=`level-${e}`,n=document.getElementById(t),i=document.getElementById(`level-${e}-label`);n&&n.remove(),i&&i.remove()}}showCanvases(){this.removeCanvases();const e=document.getElementById(\"layers\");for(let t=0;t<this.illuminationLayers.length;t++){const n=this.illuminationLayers[t],i=document.createElement(\"label\");i.innerText=`Shading Level ${t}:`,i.id=`level-${t}-label`,e.append(i,n.context.canvas)}}zigzag(e,t,n){t.save(),t.lineCap=\"round\",t.fillStyle=t.strokeStyle=n,t.beginPath(),t.moveTo(0,0);for(let n=1;n<R.dimension/2;n+=1){t.lineWidth=2.3*Math.random()+e+1;const[i,o]=n%2==0?[5*n,0]:[0,5*n];t.lineTo(i,o)}t.stroke(),t.restore()}pointillism(e,t,n){t.save(),t.fillStyle=t.strokeStyle=n;const i=5*Math.random()+10,o=()=>i-3*Math.random();for(let e=0;e<R.dimension;e+=o())for(let n=0;n<R.dimension;n+=o())t.lineWidth=1,t.beginPath(),t.arc(e,n,i,0,2*Math.PI),t.stroke();t.restore()}makeTexCanvas(e,t){let n=document.createElement(\"canvas\");n.id=`level-${e}`,n.setAttribute(\"title\",`Level ${e}`),n.height=R.dimension,n.width=R.dimension;let i=n.getContext(\"2d\");return i.fillStyle=t.getStyle(),i.fillRect(0,0,R.dimension,R.dimension),{context:i,texture:new g.a(n)}}}R.dimension=512;class V extends y.a{constructor(){super(...arguments),this.name=\"inker\",this.side=b.h,this.transparent=!0,this.beforeRender=({},{},{},{},e)=>{e instanceof V&&Object.assign(e.uniforms,this.updateUniforms())},this.vertexShader=\"\\n        uniform float silhouetteWidth;\\n        uniform vec3 lightPosition;\\n\\n        out vec3 vertexNormal;\\n        out vec3 vertexPosition;\\n\\n        float rand(vec2 co){\\n            return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n        }\\n\\n        vec4 silhouette(vec4 relativePosition, float ratio) {\\n\\n\\n            vec3 offsetSilhouette = relativePosition.xyz + lightPosition;\\n\\n            vec4 silhouettePosition = projectionMatrix * modelViewMatrix * vec4(offsetSilhouette, 1.0);\\n\\n            // NOTE: subtract silhouettePosition from relativePosition because BackSide face normals are negative\\n            vec4 distanceToSilhouette = normalize(relativePosition - silhouettePosition);\\n\\n            return relativePosition + distanceToSilhouette * silhouetteWidth * relativePosition.w * ratio;\\n        }\\n\\n        void main() {\\n            vertexNormal = mat3(transpose(inverse(modelViewMatrix))) * normal;\\n            vertexPosition = vec3(modelMatrix * vec4(position, 1.0));\\n\\n            // For artistic effect make the silhouette thicker at lower cos values\\n            vec3 lightDirection = normalize(lightPosition - vertexPosition);\\n            float ratio = 1.0 - clamp(dot(normalize(vertexNormal), lightDirection), 0.0, 1.0);\\n\\n            vec4 relativePosition = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n            gl_Position = silhouette(relativePosition, ratio);\\n        }\\n    \",this.fragmentShader=\"\\n        uniform vec3 silhouetteColor;\\n        uniform vec3 lightPosition;\\n\\n        in vec3 vertexNormal;\\n        in vec3 vertexPosition;\\n\\n        float lakesTonalShadingSilhouetteAlpha(float cos) {\\n            if (cos > 0.5) {\\n                // illuminated\\n                return 0.0;\\n            } else {\\n                // shaded\\n                return 1.0;\\n            }\\n        }\\n        void main() {\\n            vec3 normal = normalize(vertexNormal); // n_bar\\n            vec3 lightDirection = normalize(lightPosition - vertexPosition); // l_bar\\n            float cos = clamp(dot(normal, lightDirection), 0.0, 1.0);\\n\\n            gl_FragColor = vec4(silhouetteColor, lakesTonalShadingSilhouetteAlpha(cos));\\n        }\\n    \"}updateUniforms(){return this.needsUpdate=!0,{silhouetteColor:{value:new i.a(j.silhouetteColor)},silhouetteWidth:{value:j.silhouetteWidth},lightPosition:{value:new l.a(...j.lightPosition)}}}}var U=n(\"./node_modules/three/src/core/Geometry.js\");const F=new R,G=new V,A=new class{constructor(){this.state={lastVelocityX:0,lastVelocityY:0,lastLineCount:1,lastFlipDirection:!j.flipDirection},this.beforeRender=({},{},{},e,{})=>{if(!this.velocityChange())return;const t=e,n=t.attributes.position.array,i=new l.a(n[0],n[1],n[2]),o=new l.a(i.x-j.velocityX,i.y-j.velocityY,i.z);n[3]=o.x,n[4]=o.y,t.attributes.position.needsUpdate=!0}}newLine(e,t){let n=new U.a;n.name=`line_${t}`;const i=e,o=new l.a(i.x-j.velocityX,i.y-j.velocityY,i.z);return n.vertices.push(i,o),n.verticesNeedUpdate=!0,n}randomVertices(e){let t=S.geometry.vertices.slice(0);const n=this.selectBestAxis();t.sort((e,t)=>j.flipDirection?e[n]-t[n]:t[n]-e[n]),t=t.slice(0,2*e);let i=[];for(let n=0;n<e;n++){const e=t[Math.floor(Math.random()*t.length)];i.push(e)}return i}makeLineGeometries(){let e=this.randomVertices(j.lineCount);const t=[];for(let n=0;n<e.length;n++){const i=this.newLine(e[n]);t.push(i)}return t}selectBestAxis(){return j.velocityX>=j.velocityY?\"x\":\"y\"}velocityChange(){const e=this.state.lastVelocityX!==j.velocityX||this.state.lastVelocityY!==j.velocityY||this.state.lastLineCount!==j.lineCount||this.state.lastFlipDirection!==j.flipDirection;return this.state.lastVelocityX=j.velocityX,this.state.lastVelocityY=j.velocityY,this.state.lastLineCount=j.lineCount,this.state.lastFlipDirection=j.flipDirection,e}};let B=[];class N extends h.a{constructor(){super(),this.addGeometries(S.geometry)}addGeometries(...e){let t=e.flatMap(e=>{const t=new m.a(e,F),n=new m.a(e,G);return t.onBeforeRender=F.beforeRender,n.onBeforeRender=G.beforeRender,[t,n]});return super.add(...t)}addLines(){const e=new h.a;e.name=\"lines\",e.add(...A.makeLineGeometries().map(e=>{const t=new v.a(e,new f.a({color:0}));return t.onBeforeRender=A.beforeRender,t})),B.push(e.uuid),super.add(e)}removeLines(e){var t;for(const n of B)null===(t=e.getObjectByProperty(\"uuid\",n))||void 0===t||t.traverse(t=>{if(t instanceof h.a){let n=t.children.filter(e=>e instanceof v.a);for(const e of n)e.geometry.dispose(),e.material instanceof f.a&&e.material.dispose();t.remove(...n),e.remove(t)}})}}const I=new c;I.showPanel(0),document.body.appendChild(I.dom);const z=new r.a,W=new o.a(75,window.innerWidth/window.innerHeight,1,1e5),X=new s.a({canvas:u.canvas,context:u}),Y=new i.a(.2,.3,.3),$=[0,5e3,-5e3,1e4,-1e4,15e3,-15e3,2e4,-2e4,25e3,-25e3],H=[];function Z(e){let t=new N;const n=new l.a(...[Math.floor(e/$.length%$.length),Math.floor(e%$.length),Math.floor(e/$.length**2)]);return t.translateX($[n.x]),t.translateY($[n.y]),t.translateZ($[n.z]),z.add(t),H.push(t.uuid),t}function J(){const e=document.getElementsByTagName(\"main\")[0];W.aspect=e.clientWidth/e.clientHeight,W.updateProjectionMatrix(),X.setPixelRatio(window.devicePixelRatio),X.setSize(e.clientWidth,e.clientHeight)}window.addEventListener(\"DOMContentLoaded\",(async function(){X.setClearColor(Y),J(),window.addEventListener(\"resize\",J);const e=new a.a(W,X.domElement);e.update(),W.position.z=3200;let t=0,n=j.showLines,i=0,o=performance.now(),r=[],s=!1;j.objectCount=1,function a(l){requestAnimationFrame(a),i++,I.begin();const c=j.objectCount-z.children.length;if(0!==c)for(let e=0;e<Math.abs(c);e++)c<0?(H.length>0&&z.remove(z.getObjectByProperty(\"uuid\",H.pop())),t--):(z.add(Z(t)),t++);if(e.update(),X.setClearColor(j.clearColor),X.render(z,W),j.showLines?(n=!0,z.children.forEach(e=>e instanceof N?e.addLines():void 0)):(n&&z.children.forEach(e=>e instanceof N?e.removeLines(z):void 0),n=!1),I.end(),j.gather&&l>o+1e3&&(o=l,r.push({fps:i,triangles:X.info.render.triangles}),i=0,j.objectCount+=j.gatherSpeed),r.length>1331/j.gatherSpeed&&!s){console.table(r);let e=document.createElement(\"p\");e.textContent=JSON.stringify(r),document.body.append(e),j.gather=!1,s=!0}}(o)}))},\"./src/main.css\":function(e,t,n){var i=n(\"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./src/main.css\");\"string\"==typeof i&&(i=[[e.i,i,\"\"]]);var o={insert:\"head\",singleton:!1};n(\"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(i,o);i.locals&&(e.exports=i.locals)},0:function(e,t,n){n(\"./src/index.ts\"),e.exports=n(\"./src/main.css\")}});"],"mappings":"AAAA","sourceRoot":""}